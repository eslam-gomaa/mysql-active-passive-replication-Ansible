
#- name: Reset Replication to avoid Errors for the first time.
#  sh:
#    cmd: |
#      mysql -u root -P {{ mysql_port }} -h localhost -p{{ msyql_root_password }} << 'EOF'
#      STOP SLAVE;
#      RESET MASTER;
#      RESET SLAVE;
#      EOF
#    condition: |
#      mysql -u root -P {{ mysql_port }} -h localhost -p{{ msyql_root_password }} -e 'show slave status \G;'
#    regexp: True
#    if_stdout: 'Slave_IO_Running: Yes'
#    if_stdout_operator: '!='

- name: Configure replication on the slave.
  sh:
    cmd: |
      mysql -u root -P {{ mysql_port }} -h localhost -p{{ msyql_root_password }} << 'EOF'
      STOP SLAVE;
      CHANGE MASTER TO master_host='{{ groups['mysql-replication'].0 }}',
          master_port={{ mysql_port }},
          master_user='{{ mysql_replication_user }}',
          master_password='{{ mysql_replication_password }}';
      START SLAVE;
      SHOW MASTER STATUS;
      EOF
    condition: |
      mysql -u root -P {{ mysql_port }} -h localhost -p{{ msyql_root_password }} -e 'show slave status \G;'
    regexp: True
    if_stdout: 'Slave_IO_Running: Yes'
    if_stdout_operator: '!='
  when: role == "passive"
  register: test_sh

- debug:
    var: test_sh

- name: Configure replication on the master.
  sh:
    cmd: |
      mysql -u root -P {{ mysql_port }} -h localhost -p{{ msyql_root_password }} << 'EOF'

      STOP SLAVE;
      CHANGE MASTER TO master_host='{{ groups['mysql-replication'].1 }}',
          master_port={{ mysql_port }},
          master_user='{{ mysql_replication_user }}',
          master_password='{{ mysql_replication_password }}';
      START SLAVE;
      SHOW MASTER STATUS;
      EOF
    condition: |
      mysql -u root -P {{ mysql_port }} -h localhost -p{{ msyql_root_password }} -e 'show slave status \G;'
    regexp: True
    if_stdout: 'Slave_IO_Running: Yes'
    if_stdout_operator: '!='
  when: role == "active"
  register: test_sh

- debug:
    var: test_sh

